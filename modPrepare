Option Explicit

'#If VBA7 Then
'    Public Declare PtrSafe Sub Sleep Lib "kernel32" (ByVal dwMilliseconds As LongPtr) 'For 64 Bit Systems
'#Else
'    Public Declare Sub Sleep Lib "kernel32" (ByVal dwMilliseconds As Long) 'For 32 Bit Systems
'#End If

Dim wsData As Worksheet, wsReport As Worksheet, wsTemplate As Worksheet
Const ROW_START As Long = 2

Public Sub main()
    'Ускоряем программу
    modMainFunctions.ToggleBook True
    Dim rowOfData As Long, rowEnd As Long
    Dim colCode As Integer
    'Получаем колонку, где у нас находятся уникальные данные
    colCode = 3
    'Получаем последнюю строку
    Set wsData = ThisWorkbook.Worksheets("Data")
    Call copyFromTemplateToMain
    rowEnd = modMainFunctions.getRowEnd(wsData, colCode, ROW_START)
    Dim modelData As shDataModel, viewData  As shDataView
    'Получаем названия столбцов, а также функции для их обработки
    Set modelData = New shDataModel
    'Создаем объект для анализа данных
    Set viewData = New shDataView
    Dim datController As shDataController
    Set datController = New shDataController
    'анализируем данные
    datController.proccessTable modelData, viewData
    'печатаем их на листе
    viewData.printData datController
    'Возвращаем программу в нормальное состояние
    ThisWorkbook.Worksheets("TDSheet").Activate
    modMainFunctions.ToggleBook False
    
End Sub
'Очищаем лист с данными, и копируем туда с листа шаблона
Private Sub copyFromTemplateToMain()
    Set wsReport = ThisWorkbook.Worksheets("TDSheet")
    Set wsTemplate = ThisWorkbook.Worksheets("Шаблон шапка")
    wsReport.Cells.Delete xlUp
    wsTemplate.Cells.Copy
    wsReport.Range("A1").PasteSpecial xlPasteAll
End Sub
'Перед отправкой на сервак- очищает листы Data & ParamData, а также подготовленность книги снимает
Public Sub prepareBookToUpload()
    ToggleBook True
    On Error Resume Next
    ThisWorkbook.Worksheets("Data").Delete
    ThisWorkbook.Worksheets("ParamData").Delete
    ЭтаКнига.clearCheckedValue
    On Error GoTo 0
    ToggleBook False
End Sub

'Public Sub printProgressBar(iteration As Integer, total As Integer, Optional prefix As String = "", Optional suffix As String = "", _
'            Optional decimals As Integer = 1, Optional length As Integer = 100, Optional fill As String = "-", Optional printEnd As String = "\r")
'    '    Call in a loop to create terminal progress bar
''    @params:
''        iteration   - Required  : current iteration (Int)
''        total       - Required  : total iterations (Int)
''        prefix      - Optional  : prefix string (Str)
''        suffix      - Optional  : suffix string (Str)
''        decimals    - Optional  : positive number of decimals in percent complete (Int)
''        length      - Optional  : character length of bar (Int)
''        fill        - Optional  : bar fill character (Str)
''        printEnd    - Optional  : end character (e.g. "\r", "\r\n") (Str)
'    Dim percent As Integer, filledLength As Integer
'    percent = 100 * (iteration / total)
'    filledLength = length * iteration / total
'    bar = fill * filledLength + '-' * (length - filledLength)
'    print('\r%s |%s| %s%% %s' % (prefix, bar, percent, suffix), end = printEnd)
'    # Print New Line on Complete
'    if iteration == total:
'        print()
'End Sub

Public Function TransormCyrrilicToLatin(val As String) As String
    
End Function

Public Function splitTextBasedOnDivider(val As String, divider As String, numElement As Integer) As String
    Dim res As String
    res = Split(val, divider)(numElement)
    splitTextBasedOnDivider = res
End Function
Public Function CyrillicToLatin(val As String) As String
    Dim text As String
    text = LCase(val)
    Dim Rus As Variant, Eng As Variant
    Rus = Array(" ", "№", ",", "%", "а", "б", "в", "г", "д", "е", "ё", "ж", "з", "и", "й", "к", "л", "м", "н", "о", "п", "р", "с", "т", "у", "ф", "х", "ц", "ч", "ш", "щ", "ъ", "ы", "ь", "э", "ю", "я")
    Eng = Array("_", "num", "_", "perc", "a", "b", "v", "g", "d", "e", "jo", "zh", "z", "i", "j", "k", "l", "m", "n", "o", "p", "r", "s", "t", "u", "f", "kh", "ts", "ch", "sh", "sch", "q", "y", "", "e", "yu", "ya")
    Dim i As Long, c As String, j As Integer, outchr As String, founded As Boolean, OutStr As String
    For i = 1 To Len(text)
        c = Mid(text, i, 1)
        founded = False
        For j = 0 To UBound(Rus)
            If Rus(j) = c Then
                outchr = Eng(j)
                founded = True
                Exit For
            End If
        Next j
        If founded Then OutStr = OutStr & outchr Else OutStr = OutStr & c
    Next i
    CyrillicToLatin = OutStr
End Function

Public Function clearWordOfUnsupportedByVbaSymbols(val As String)
    Dim symbols As String, symbolsArr As Variant, res As String, sym As Variant
    symbols = "*|!|#|$|%|^|&|)|(|,"
    symbolsArr = Split(symbols, "|")
    res = LCase(val)
    For Each sym In symbolsArr
        res = Replace(res, sym, "")
    Next
    res = Replace(res, "№", "num_")
    res = Replace(res, " ", "_")
    clearWordOfUnsupportedByVbaSymbols = res
End Function

